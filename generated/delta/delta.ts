// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class CollectionsPaused extends ethereum.Event {
  get params(): CollectionsPaused__Params {
    return new CollectionsPaused__Params(this);
  }
}

export class CollectionsPaused__Params {
  _event: CollectionsPaused;

  constructor(event: CollectionsPaused) {
    this._event = event;
  }

  get collectionIds(): Array<BigInt> {
    return this._event.parameters[0].value.toBigIntArray();
  }

  get pauser(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CollectionsUnpaused extends ethereum.Event {
  get params(): CollectionsUnpaused__Params {
    return new CollectionsUnpaused__Params(this);
  }
}

export class CollectionsUnpaused__Params {
  _event: CollectionsUnpaused;

  constructor(event: CollectionsUnpaused) {
    this._event = event;
  }

  get collectionIds(): Array<BigInt> {
    return this._event.parameters[0].value.toBigIntArray();
  }

  get pauser(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FungibleCollection extends ethereum.Event {
  get params(): FungibleCollection__Params {
    return new FungibleCollection__Params(this);
  }
}

export class FungibleCollection__Params {
  _event: FungibleCollection;

  constructor(event: FungibleCollection) {
    this._event = event;
  }

  get id(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class MinterAdded extends ethereum.Event {
  get params(): MinterAdded__Params {
    return new MinterAdded__Params(this);
  }
}

export class MinterAdded__Params {
  _event: MinterAdded;

  constructor(event: MinterAdded) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class MinterRemoved extends ethereum.Event {
  get params(): MinterRemoved__Params {
    return new MinterRemoved__Params(this);
  }
}

export class MinterRemoved__Params {
  _event: MinterRemoved;

  constructor(event: MinterRemoved) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NonFungibleCollection extends ethereum.Event {
  get params(): NonFungibleCollection__Params {
    return new NonFungibleCollection__Params(this);
  }
}

export class NonFungibleCollection__Params {
  _event: NonFungibleCollection;

  constructor(event: NonFungibleCollection) {
    this._event = event;
  }

  get id(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PauserAdded extends ethereum.Event {
  get params(): PauserAdded__Params {
    return new PauserAdded__Params(this);
  }
}

export class PauserAdded__Params {
  _event: PauserAdded;

  constructor(event: PauserAdded) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PauserRemoved extends ethereum.Event {
  get params(): PauserRemoved__Params {
    return new PauserRemoved__Params(this);
  }
}

export class PauserRemoved__Params {
  _event: PauserRemoved;

  constructor(event: PauserRemoved) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RelayHubChanged extends ethereum.Event {
  get params(): RelayHubChanged__Params {
    return new RelayHubChanged__Params(this);
  }
}

export class RelayHubChanged__Params {
  _event: RelayHubChanged;

  constructor(event: RelayHubChanged) {
    this._event = event;
  }

  get oldRelayHub(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newRelayHub(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get _operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get _values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get _operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get _value(): string {
    return this._event.parameters[0].value.toString();
  }

  get _id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class delta__acceptRelayedCallResult {
  value0: BigInt;
  value1: Bytes;

  constructor(value0: BigInt, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }
}

export class delta extends ethereum.SmartContract {
  static bind(address: Address): delta {
    return new delta("delta", address);
  }

  _gasPriceScaling(): BigInt {
    let result = super.call(
      "_gasPriceScaling",
      "_gasPriceScaling():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__gasPriceScaling(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_gasPriceScaling",
      "_gasPriceScaling():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _gasToken(): Address {
    let result = super.call("_gasToken", "_gasToken():(address)", []);

    return result[0].toAddress();
  }

  try__gasToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("_gasToken", "_gasToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _payoutWallet(): Address {
    let result = super.call("_payoutWallet", "_payoutWallet():(address)", []);

    return result[0].toAddress();
  }

  try__payoutWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "_payoutWallet",
      "_payoutWallet():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  acceptRelayedCall(
    param0: Address,
    from: Address,
    param2: Bytes,
    transactionFee: BigInt,
    gasPrice: BigInt,
    param5: BigInt,
    param6: BigInt,
    param7: Bytes,
    maxPossibleCharge: BigInt
  ): delta__acceptRelayedCallResult {
    let result = super.call(
      "acceptRelayedCall",
      "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256):(uint256,bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromBytes(param2),
        ethereum.Value.fromUnsignedBigInt(transactionFee),
        ethereum.Value.fromUnsignedBigInt(gasPrice),
        ethereum.Value.fromUnsignedBigInt(param5),
        ethereum.Value.fromUnsignedBigInt(param6),
        ethereum.Value.fromBytes(param7),
        ethereum.Value.fromUnsignedBigInt(maxPossibleCharge)
      ]
    );

    return new delta__acceptRelayedCallResult(
      result[0].toBigInt(),
      result[1].toBytes()
    );
  }

  try_acceptRelayedCall(
    param0: Address,
    from: Address,
    param2: Bytes,
    transactionFee: BigInt,
    gasPrice: BigInt,
    param5: BigInt,
    param6: BigInt,
    param7: Bytes,
    maxPossibleCharge: BigInt
  ): ethereum.CallResult<delta__acceptRelayedCallResult> {
    let result = super.tryCall(
      "acceptRelayedCall",
      "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256):(uint256,bytes)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromBytes(param2),
        ethereum.Value.fromUnsignedBigInt(transactionFee),
        ethereum.Value.fromUnsignedBigInt(gasPrice),
        ethereum.Value.fromUnsignedBigInt(param5),
        ethereum.Value.fromUnsignedBigInt(param6),
        ethereum.Value.fromBytes(param7),
        ethereum.Value.fromUnsignedBigInt(maxPossibleCharge)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new delta__acceptRelayedCallResult(
        value[0].toBigInt(),
        value[1].toBytes()
      )
    );
  }

  balanceOf(tokenOwner: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenOwner),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(tokenOwner: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenOwner),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf1(tokenOwner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(tokenOwner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf1(tokenOwner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(tokenOwner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(
    tokenOwners: Array<Address>,
    ids: Array<BigInt>
  ): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(tokenOwners),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    tokenOwners: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(tokenOwners),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  collectionOf(id: BigInt): BigInt {
    let result = super.call("collectionOf", "collectionOf(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigInt();
  }

  try_collectionOf(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collectionOf",
      "collectionOf(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exists(id: BigInt): boolean {
    let result = super.call("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBoolean();
  }

  try_exists(id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getHubAddr(): Address {
    let result = super.call("getHubAddr", "getHubAddr():(address)", []);

    return result[0].toAddress();
  }

  try_getHubAddr(): ethereum.CallResult<Address> {
    let result = super.tryCall("getHubAddr", "getHubAddr():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  idPaused(id: BigInt): boolean {
    let result = super.call("idPaused", "idPaused(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBoolean();
  }

  try_idPaused(id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("idPaused", "idPaused(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(tokenOwner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(tokenOwner),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    tokenOwner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(tokenOwner),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isFungible(id: BigInt): boolean {
    let result = super.call("isFungible", "isFungible(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBoolean();
  }

  try_isFungible(id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isFungible", "isFungible(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isMinter(account: Address): boolean {
    let result = super.call("isMinter", "isMinter(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isMinter(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isMinter", "isMinter(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPauser(account: Address): boolean {
    let result = super.call("isPauser", "isPauser(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isPauser(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPauser", "isPauser(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  preRelayedCall(context: Bytes): Bytes {
    let result = super.call(
      "preRelayedCall",
      "preRelayedCall(bytes):(bytes32)",
      [ethereum.Value.fromBytes(context)]
    );

    return result[0].toBytes();
  }

  try_preRelayedCall(context: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "preRelayedCall",
      "preRelayedCall(bytes):(bytes32)",
      [ethereum.Value.fromBytes(context)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  relayHubVersion(): string {
    let result = super.call(
      "relayHubVersion",
      "relayHubVersion():(string)",
      []
    );

    return result[0].toString();
  }

  try_relayHubVersion(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "relayHubVersion",
      "relayHubVersion():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  uri(id: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toString();
  }

  try_uri(id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get gasTokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get payoutWallet(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddMinterCall extends ethereum.Call {
  get inputs(): AddMinterCall__Inputs {
    return new AddMinterCall__Inputs(this);
  }

  get outputs(): AddMinterCall__Outputs {
    return new AddMinterCall__Outputs(this);
  }
}

export class AddMinterCall__Inputs {
  _call: AddMinterCall;

  constructor(call: AddMinterCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddMinterCall__Outputs {
  _call: AddMinterCall;

  constructor(call: AddMinterCall) {
    this._call = call;
  }
}

export class AddPauserCall extends ethereum.Call {
  get inputs(): AddPauserCall__Inputs {
    return new AddPauserCall__Inputs(this);
  }

  get outputs(): AddPauserCall__Outputs {
    return new AddPauserCall__Outputs(this);
  }
}

export class AddPauserCall__Inputs {
  _call: AddPauserCall;

  constructor(call: AddPauserCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddPauserCall__Outputs {
  _call: AddPauserCall;

  constructor(call: AddPauserCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BatchMintCall extends ethereum.Call {
  get inputs(): BatchMintCall__Inputs {
    return new BatchMintCall__Inputs(this);
  }

  get outputs(): BatchMintCall__Outputs {
    return new BatchMintCall__Outputs(this);
  }
}

export class BatchMintCall__Inputs {
  _call: BatchMintCall;

  constructor(call: BatchMintCall) {
    this._call = call;
  }

  get to(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get uris(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get safe(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class BatchMintCall__Outputs {
  _call: BatchMintCall;

  constructor(call: BatchMintCall) {
    this._call = call;
  }
}

export class CreateCollectionCall extends ethereum.Call {
  get inputs(): CreateCollectionCall__Inputs {
    return new CreateCollectionCall__Inputs(this);
  }

  get outputs(): CreateCollectionCall__Outputs {
    return new CreateCollectionCall__Outputs(this);
  }
}

export class CreateCollectionCall__Inputs {
  _call: CreateCollectionCall;

  constructor(call: CreateCollectionCall) {
    this._call = call;
  }

  get collectionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get byteUri(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class CreateCollectionCall__Outputs {
  _call: CreateCollectionCall;

  constructor(call: CreateCollectionCall) {
    this._call = call;
  }
}

export class MigrateToIPFSCall extends ethereum.Call {
  get inputs(): MigrateToIPFSCall__Inputs {
    return new MigrateToIPFSCall__Inputs(this);
  }

  get outputs(): MigrateToIPFSCall__Outputs {
    return new MigrateToIPFSCall__Outputs(this);
  }
}

export class MigrateToIPFSCall__Inputs {
  _call: MigrateToIPFSCall;

  constructor(call: MigrateToIPFSCall) {
    this._call = call;
  }
}

export class MigrateToIPFSCall__Outputs {
  _call: MigrateToIPFSCall;

  constructor(call: MigrateToIPFSCall) {
    this._call = call;
  }
}

export class MintFungibleCall extends ethereum.Call {
  get inputs(): MintFungibleCall__Inputs {
    return new MintFungibleCall__Inputs(this);
  }

  get outputs(): MintFungibleCall__Outputs {
    return new MintFungibleCall__Outputs(this);
  }
}

export class MintFungibleCall__Inputs {
  _call: MintFungibleCall;

  constructor(call: MintFungibleCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get collection(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MintFungibleCall__Outputs {
  _call: MintFungibleCall;

  constructor(call: MintFungibleCall) {
    this._call = call;
  }
}

export class MintNonFungibleCall extends ethereum.Call {
  get inputs(): MintNonFungibleCall__Inputs {
    return new MintNonFungibleCall__Inputs(this);
  }

  get outputs(): MintNonFungibleCall__Outputs {
    return new MintNonFungibleCall__Outputs(this);
  }
}

export class MintNonFungibleCall__Inputs {
  _call: MintNonFungibleCall;

  constructor(call: MintNonFungibleCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get byteUri(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get safe(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class MintNonFungibleCall__Outputs {
  _call: MintNonFungibleCall;

  constructor(call: MintNonFungibleCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCollectionsCall extends ethereum.Call {
  get inputs(): PauseCollectionsCall__Inputs {
    return new PauseCollectionsCall__Inputs(this);
  }

  get outputs(): PauseCollectionsCall__Outputs {
    return new PauseCollectionsCall__Outputs(this);
  }
}

export class PauseCollectionsCall__Inputs {
  _call: PauseCollectionsCall;

  constructor(call: PauseCollectionsCall) {
    this._call = call;
  }

  get collectionIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class PauseCollectionsCall__Outputs {
  _call: PauseCollectionsCall;

  constructor(call: PauseCollectionsCall) {
    this._call = call;
  }
}

export class PostRelayedCallCall extends ethereum.Call {
  get inputs(): PostRelayedCallCall__Inputs {
    return new PostRelayedCallCall__Inputs(this);
  }

  get outputs(): PostRelayedCallCall__Outputs {
    return new PostRelayedCallCall__Outputs(this);
  }
}

export class PostRelayedCallCall__Inputs {
  _call: PostRelayedCallCall;

  constructor(call: PostRelayedCallCall) {
    this._call = call;
  }

  get context(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get success(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get actualCharge(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get preRetVal(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class PostRelayedCallCall__Outputs {
  _call: PostRelayedCallCall;

  constructor(call: PostRelayedCallCall) {
    this._call = call;
  }
}

export class PreRelayedCallCall extends ethereum.Call {
  get inputs(): PreRelayedCallCall__Inputs {
    return new PreRelayedCallCall__Inputs(this);
  }

  get outputs(): PreRelayedCallCall__Outputs {
    return new PreRelayedCallCall__Outputs(this);
  }
}

export class PreRelayedCallCall__Inputs {
  _call: PreRelayedCallCall;

  constructor(call: PreRelayedCallCall) {
    this._call = call;
  }

  get context(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PreRelayedCallCall__Outputs {
  _call: PreRelayedCallCall;

  constructor(call: PreRelayedCallCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceMinterCall extends ethereum.Call {
  get inputs(): RenounceMinterCall__Inputs {
    return new RenounceMinterCall__Inputs(this);
  }

  get outputs(): RenounceMinterCall__Outputs {
    return new RenounceMinterCall__Outputs(this);
  }
}

export class RenounceMinterCall__Inputs {
  _call: RenounceMinterCall;

  constructor(call: RenounceMinterCall) {
    this._call = call;
  }
}

export class RenounceMinterCall__Outputs {
  _call: RenounceMinterCall;

  constructor(call: RenounceMinterCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenouncePauserCall extends ethereum.Call {
  get inputs(): RenouncePauserCall__Inputs {
    return new RenouncePauserCall__Inputs(this);
  }

  get outputs(): RenouncePauserCall__Outputs {
    return new RenouncePauserCall__Outputs(this);
  }
}

export class RenouncePauserCall__Inputs {
  _call: RenouncePauserCall;

  constructor(call: RenouncePauserCall) {
    this._call = call;
  }
}

export class RenouncePauserCall__Outputs {
  _call: RenouncePauserCall;

  constructor(call: RenouncePauserCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SafeTransferFrom2Call extends ethereum.Call {
  get inputs(): SafeTransferFrom2Call__Inputs {
    return new SafeTransferFrom2Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom2Call__Outputs {
    return new SafeTransferFrom2Call__Outputs(this);
  }
}

export class SafeTransferFrom2Call__Inputs {
  _call: SafeTransferFrom2Call;

  constructor(call: SafeTransferFrom2Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFrom2Call__Outputs {
  _call: SafeTransferFrom2Call;

  constructor(call: SafeTransferFrom2Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetGasPriceCall extends ethereum.Call {
  get inputs(): SetGasPriceCall__Inputs {
    return new SetGasPriceCall__Inputs(this);
  }

  get outputs(): SetGasPriceCall__Outputs {
    return new SetGasPriceCall__Outputs(this);
  }
}

export class SetGasPriceCall__Inputs {
  _call: SetGasPriceCall;

  constructor(call: SetGasPriceCall) {
    this._call = call;
  }

  get gasPriceScaling(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetGasPriceCall__Outputs {
  _call: SetGasPriceCall;

  constructor(call: SetGasPriceCall) {
    this._call = call;
  }
}

export class SetGasTokenCall extends ethereum.Call {
  get inputs(): SetGasTokenCall__Inputs {
    return new SetGasTokenCall__Inputs(this);
  }

  get outputs(): SetGasTokenCall__Outputs {
    return new SetGasTokenCall__Outputs(this);
  }
}

export class SetGasTokenCall__Inputs {
  _call: SetGasTokenCall;

  constructor(call: SetGasTokenCall) {
    this._call = call;
  }

  get gasTokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGasTokenCall__Outputs {
  _call: SetGasTokenCall;

  constructor(call: SetGasTokenCall) {
    this._call = call;
  }
}

export class SetIPFSUriPrefixCall extends ethereum.Call {
  get inputs(): SetIPFSUriPrefixCall__Inputs {
    return new SetIPFSUriPrefixCall__Inputs(this);
  }

  get outputs(): SetIPFSUriPrefixCall__Outputs {
    return new SetIPFSUriPrefixCall__Outputs(this);
  }
}

export class SetIPFSUriPrefixCall__Inputs {
  _call: SetIPFSUriPrefixCall;

  constructor(call: SetIPFSUriPrefixCall) {
    this._call = call;
  }

  get ipfsUriPrefix(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetIPFSUriPrefixCall__Outputs {
  _call: SetIPFSUriPrefixCall;

  constructor(call: SetIPFSUriPrefixCall) {
    this._call = call;
  }
}

export class SetPayoutWalletCall extends ethereum.Call {
  get inputs(): SetPayoutWalletCall__Inputs {
    return new SetPayoutWalletCall__Inputs(this);
  }

  get outputs(): SetPayoutWalletCall__Outputs {
    return new SetPayoutWalletCall__Outputs(this);
  }
}

export class SetPayoutWalletCall__Inputs {
  _call: SetPayoutWalletCall;

  constructor(call: SetPayoutWalletCall) {
    this._call = call;
  }

  get payoutWallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPayoutWalletCall__Outputs {
  _call: SetPayoutWalletCall;

  constructor(call: SetPayoutWalletCall) {
    this._call = call;
  }
}

export class SetURICall extends ethereum.Call {
  get inputs(): SetURICall__Inputs {
    return new SetURICall__Inputs(this);
  }

  get outputs(): SetURICall__Outputs {
    return new SetURICall__Outputs(this);
  }
}

export class SetURICall__Inputs {
  _call: SetURICall;

  constructor(call: SetURICall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get byteUri(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetURICall__Outputs {
  _call: SetURICall;

  constructor(call: SetURICall) {
    this._call = call;
  }
}

export class SetUriPrefixCall extends ethereum.Call {
  get inputs(): SetUriPrefixCall__Inputs {
    return new SetUriPrefixCall__Inputs(this);
  }

  get outputs(): SetUriPrefixCall__Outputs {
    return new SetUriPrefixCall__Outputs(this);
  }
}

export class SetUriPrefixCall__Inputs {
  _call: SetUriPrefixCall;

  constructor(call: SetUriPrefixCall) {
    this._call = call;
  }

  get uriPrefix(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetUriPrefixCall__Outputs {
  _call: SetUriPrefixCall;

  constructor(call: SetUriPrefixCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCollectionsCall extends ethereum.Call {
  get inputs(): UnpauseCollectionsCall__Inputs {
    return new UnpauseCollectionsCall__Inputs(this);
  }

  get outputs(): UnpauseCollectionsCall__Outputs {
    return new UnpauseCollectionsCall__Outputs(this);
  }
}

export class UnpauseCollectionsCall__Inputs {
  _call: UnpauseCollectionsCall;

  constructor(call: UnpauseCollectionsCall) {
    this._call = call;
  }

  get collectionIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class UnpauseCollectionsCall__Outputs {
  _call: UnpauseCollectionsCall;

  constructor(call: UnpauseCollectionsCall) {
    this._call = call;
  }
}

export class WithdrawDepositsCall extends ethereum.Call {
  get inputs(): WithdrawDepositsCall__Inputs {
    return new WithdrawDepositsCall__Inputs(this);
  }

  get outputs(): WithdrawDepositsCall__Outputs {
    return new WithdrawDepositsCall__Outputs(this);
  }
}

export class WithdrawDepositsCall__Inputs {
  _call: WithdrawDepositsCall;

  constructor(call: WithdrawDepositsCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get payee(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawDepositsCall__Outputs {
  _call: WithdrawDepositsCall;

  constructor(call: WithdrawDepositsCall) {
    this._call = call;
  }
}
